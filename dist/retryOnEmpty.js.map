{"version":3,"file":"retryOnEmpty.js","sourceRoot":"","sources":["../src/retryOnEmpty.ts"],"names":[],"mappings":"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","sourcesContent":["import clone from 'clone';\nimport { PollingBlockTracker } from 'eth-block-tracker';\nimport {\n  createAsyncMiddleware,\n  JsonRpcMiddleware,\n  PendingJsonRpcResponse,\n} from 'json-rpc-engine';\nimport pify from 'pify';\nimport { blockTagParamIndex } from './utils/cache';\nimport { Block, SafeEventEmitterProvider } from './types';\n\n//\n// RetryOnEmptyMiddleware will retry any request with an empty response that has\n// a numbered block reference at or lower than the blockTracker's latest block.\n// Its useful for dealing with load-balanced ethereum JSON RPC\n// nodes that are not always in sync with each other.\n//\n\n// empty values used to determine if a request should be retried\n// `<nil>` comes from https://github.com/ethereum/go-ethereum/issues/16925\nconst emptyValues: (string | null | undefined)[] = [\n  undefined,\n  null,\n  '\\u003cnil\\u003e',\n];\n\ninterface RetryOnEmptyMiddlewareOptions {\n  provider?: SafeEventEmitterProvider;\n  blockTracker?: PollingBlockTracker;\n}\n\nexport function createRetryOnEmptyMiddleware({\n  provider,\n  blockTracker,\n}: RetryOnEmptyMiddlewareOptions = {}): JsonRpcMiddleware<string[], Block> {\n  if (!provider) {\n    throw Error(\n      'RetryOnEmptyMiddleware - mandatory \"provider\" option is missing.',\n    );\n  }\n\n  if (!blockTracker) {\n    throw Error(\n      'RetryOnEmptyMiddleware - mandatory \"blockTracker\" option is missing.',\n    );\n  }\n\n  return createAsyncMiddleware(async (req, res, next) => {\n    const blockRefIndex: number | undefined = blockTagParamIndex(req);\n    // skip if method does not include blockRef\n    if (blockRefIndex === undefined) {\n      return next();\n    }\n    // skip if not exact block references\n    let blockRef: string | undefined = req.params?.[blockRefIndex];\n    // omitted blockRef implies \"latest\"\n    if (blockRef === undefined) {\n      blockRef = 'latest';\n    }\n\n    // skip if non-number block reference\n    if (['latest', 'pending'].includes(blockRef)) {\n      return next();\n    }\n    // skip if block refernce is not a valid number\n    const blockRefNumber: number = Number.parseInt(blockRef.slice(2), 16);\n    if (Number.isNaN(blockRefNumber)) {\n      return next();\n    }\n    // lookup latest block\n    const latestBlockNumberHex: string = await blockTracker.getLatestBlock();\n    const latestBlockNumber: number = Number.parseInt(\n      latestBlockNumberHex.slice(2),\n      16,\n    );\n    // skip if request block number is higher than current\n    if (blockRefNumber > latestBlockNumber) {\n      return next();\n    }\n    // create child request with specific block-ref\n    const childRequest = clone(req);\n    // attempt child request until non-empty response is received\n    const childResponse: PendingJsonRpcResponse<Block> = await retry(\n      10,\n      async () => {\n        const attemptResponse: PendingJsonRpcResponse<Block> = await pify(\n          (provider as SafeEventEmitterProvider).sendAsync,\n        ).call(provider, childRequest);\n        // verify result\n        if (emptyValues.includes(attemptResponse as any)) {\n          throw new Error(\n            `RetryOnEmptyMiddleware - empty response \"${JSON.stringify(\n              attemptResponse,\n            )}\" for request \"${JSON.stringify(childRequest)}\"`,\n          );\n        }\n        return attemptResponse;\n      },\n    );\n    // copy child response onto original response\n    res.result = childResponse.result;\n    res.error = childResponse.error;\n    return next();\n  });\n}\n\nasync function retry(\n  maxRetries: number,\n  asyncFn: () => Promise<PendingJsonRpcResponse<Block>>,\n): Promise<PendingJsonRpcResponse<Block>> {\n  for (let index = 0; index < maxRetries; index++) {\n    try {\n      return await asyncFn();\n    } catch (err) {\n      await timeout(1000);\n    }\n  }\n  throw new Error('RetryOnEmptyMiddleware - retries exhausted');\n}\n\nfunction timeout(duration: number): Promise<NodeJS.Timeout> {\n  return new Promise((resolve) => setTimeout(resolve, duration));\n}\n"]}