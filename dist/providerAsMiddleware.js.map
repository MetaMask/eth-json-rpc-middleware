{"version":3,"file":"providerAsMiddleware.js","sourceRoot":"","sources":["../src/providerAsMiddleware.ts"],"names":[],"mappings":";;;AAGA,SAAgB,oBAAoB,CAClC,QAAkC;IAElC,OAAO,CAAC,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,EAAE;QAC9B,2BAA2B;QAC3B,QAAQ,CAAC,SAAS,CAChB,GAAG,EACH,CAAC,GAAY,EAAE,WAAwC,EAAE,EAAE;YACzD,oBAAoB;YACpB,IAAI,GAAG,YAAY,KAAK,EAAE;gBACxB,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;aACjB;YACD,gDAAgD;YAChD,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;YAChC,OAAO,GAAG,EAAE,CAAC;QACf,CAAC,CACF,CAAC;IACJ,CAAC,CAAC;AACJ,CAAC;AAlBD,oDAkBC;AAED,SAAgB,0BAA0B,CACxC,QAAkC;IAElC,OAAO,CAAC,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,EAAE;QAC9B,2BAA2B;QAC3B,QAAQ,CAAC,IAAI,CACX,GAAG,EACH,CAAC,GAAU,EAAE,WAAwC,EAAE,EAAE;YACvD,oBAAoB;YACpB,IAAI,GAAG,EAAE;gBACP,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;aACjB;YACD,gDAAgD;YAChD,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;YAChC,OAAO,GAAG,EAAE,CAAC;QACf,CAAC,CACF,CAAC;IACJ,CAAC,CAAC;AACJ,CAAC;AAlBD,gEAkBC","sourcesContent":["import { JsonRpcMiddleware, PendingJsonRpcResponse } from 'json-rpc-engine';\nimport type { Block, SafeEventEmitterProvider } from './types';\n\nexport function providerAsMiddleware(\n  provider: SafeEventEmitterProvider,\n): JsonRpcMiddleware<string[], Block> {\n  return (req, res, _next, end) => {\n    // send request to provider\n    provider.sendAsync(\n      req,\n      (err: unknown, providerRes: PendingJsonRpcResponse<any>) => {\n        // forward any error\n        if (err instanceof Error) {\n          return end(err);\n        }\n        // copy provider response onto original response\n        Object.assign(res, providerRes);\n        return end();\n      },\n    );\n  };\n}\n\nexport function ethersProviderAsMiddleware(\n  provider: SafeEventEmitterProvider,\n): JsonRpcMiddleware<string[], Block> {\n  return (req, res, _next, end) => {\n    // send request to provider\n    provider.send(\n      req,\n      (err: Error, providerRes: PendingJsonRpcResponse<any>) => {\n        // forward any error\n        if (err) {\n          return end(err);\n        }\n        // copy provider response onto original response\n        Object.assign(res, providerRes);\n        return end();\n      },\n    );\n  };\n}\n"]}