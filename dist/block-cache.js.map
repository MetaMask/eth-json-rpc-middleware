{"version":3,"file":"block-cache.js","sourceRoot":"","sources":["../src/block-cache.ts"],"names":[],"mappings":"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","sourcesContent":["import { PollingBlockTracker } from 'eth-block-tracker';\nimport { createAsyncMiddleware, JsonRpcMiddleware } from 'json-rpc-engine';\nimport {\n  cacheIdentifierForPayload,\n  blockTagForPayload,\n  cacheTypeForPayload,\n  canCache,\n} from './utils/cache';\nimport type {\n  Payload,\n  Block,\n  BlockCache,\n  Cache,\n  JsonRpcRequestToCache,\n} from './types';\n\n// `<nil>` comes from https://github.com/ethereum/go-ethereum/issues/16925\nconst emptyValues = [undefined, null, '\\u003cnil\\u003e'];\n\ninterface BlockCacheMiddlewareOptions {\n  blockTracker?: PollingBlockTracker;\n}\n\n//\n// Cache Strategies\n//\n\nclass BlockCacheStrategy {\n  private cache: Cache;\n\n  constructor() {\n    this.cache = {};\n  }\n\n  getBlockCacheForPayload(\n    _payload: Payload,\n    blockNumberHex: string,\n  ): BlockCache {\n    const blockNumber: number = Number.parseInt(blockNumberHex, 16);\n    let blockCache: BlockCache = this.cache[blockNumber];\n    // create new cache if necesary\n    if (!blockCache) {\n      const newCache: BlockCache = {};\n      this.cache[blockNumber] = newCache;\n      blockCache = newCache;\n    }\n    return blockCache;\n  }\n\n  async get(\n    payload: Payload,\n    requestedBlockNumber: string,\n  ): Promise<Block | undefined> {\n    // lookup block cache\n    const blockCache: BlockCache = this.getBlockCacheForPayload(\n      payload,\n      requestedBlockNumber,\n    );\n    // lookup payload in block cache\n    const identifier: string | null = cacheIdentifierForPayload(payload, true);\n    return identifier ? blockCache[identifier] : undefined;\n  }\n\n  async set(\n    payload: Payload,\n    requestedBlockNumber: string,\n    result: Block,\n  ): Promise<void> {\n    // check if we can cached this result\n    const canCacheResult: boolean = this.canCacheResult(payload, result);\n    if (!canCacheResult) {\n      return;\n    }\n\n    // set the value in the cache\n    const identifier: string | null = cacheIdentifierForPayload(payload, true);\n    if (!identifier) {\n      return;\n    }\n    const blockCache: BlockCache = this.getBlockCacheForPayload(\n      payload,\n      requestedBlockNumber,\n    );\n    blockCache[identifier] = result;\n  }\n\n  canCacheRequest(payload: Payload): boolean {\n    // check request method\n    if (!canCache(payload)) {\n      return false;\n    }\n    // check blockTag\n    const blockTag: string | undefined = blockTagForPayload(payload);\n\n    if (blockTag === 'pending') {\n      return false;\n    }\n    // can be cached\n    return true;\n  }\n\n  canCacheResult(payload: Payload, result: Block): boolean {\n    // never cache empty values (e.g. undefined)\n    if (emptyValues.includes(result as any)) {\n      return false;\n    }\n\n    // check if transactions have block reference before caching\n    if (\n      payload.method &&\n      ['eth_getTransactionByHash', 'eth_getTransactionReceipt'].includes(\n        payload.method,\n      )\n    ) {\n      if (\n        !result ||\n        !result.blockHash ||\n        result.blockHash ===\n          '0x0000000000000000000000000000000000000000000000000000000000000000'\n      ) {\n        return false;\n      }\n    }\n    // otherwise true\n    return true;\n  }\n\n  // removes all block caches with block number lower than `oldBlockHex`\n  clearBefore(oldBlockHex: string): void {\n    const oldBlockNumber: number = Number.parseInt(oldBlockHex, 16);\n    // clear old caches\n    Object.keys(this.cache)\n      .map(Number)\n      .filter((num) => num < oldBlockNumber)\n      .forEach((num) => delete this.cache[num]);\n  }\n}\n\nexport function createBlockCacheMiddleware({\n  blockTracker,\n}: BlockCacheMiddlewareOptions = {}): JsonRpcMiddleware<string[], Block> {\n  // validate options\n  if (!blockTracker) {\n    throw new Error(\n      'createBlockCacheMiddleware - No PollingBlockTracker specified',\n    );\n  }\n\n  // create caching strategies\n  const blockCache: BlockCacheStrategy = new BlockCacheStrategy();\n  const strategies: Record<string, BlockCacheStrategy> = {\n    perma: blockCache,\n    block: blockCache,\n    fork: blockCache,\n  };\n\n  return createAsyncMiddleware(async (req, res, next) => {\n    // allow cach to be skipped if so specified\n    if ((req as JsonRpcRequestToCache).skipCache) {\n      return next();\n    }\n    // check type and matching strategy\n    const type: string = cacheTypeForPayload(req);\n    const strategy: BlockCacheStrategy = strategies[type];\n    // If there's no strategy in place, pass it down the chain.\n    if (!strategy) {\n      return next();\n    }\n\n    // If the strategy can't cache this request, ignore it.\n    if (!strategy.canCacheRequest(req)) {\n      return next();\n    }\n\n    // get block reference (number or keyword)\n    let blockTag: string | undefined = blockTagForPayload(req);\n    if (!blockTag) {\n      blockTag = 'latest';\n    }\n\n    // get exact block number\n    let requestedBlockNumber: string;\n    if (blockTag === 'earliest') {\n      // this just exists for symmetry with \"latest\"\n      requestedBlockNumber = '0x00';\n    } else if (blockTag === 'latest') {\n      // fetch latest block number\n      const latestBlockNumber = await blockTracker.getLatestBlock();\n      // clear all cache before latest block\n      blockCache.clearBefore(latestBlockNumber);\n      requestedBlockNumber = latestBlockNumber;\n    } else {\n      // We have a hex number\n      requestedBlockNumber = blockTag;\n    }\n    // end on a hit, continue on a miss\n    const cacheResult: Block | undefined = await strategy.get(\n      req,\n      requestedBlockNumber,\n    );\n    if (cacheResult === undefined) {\n      // cache miss\n      // wait for other middleware to handle request\n      // eslint-disable-next-line node/callback-return\n      await next();\n\n      // add result to cache\n      // it's safe to cast res.result as Block, due to runtime type checks\n      // performed when strategy.set is called\n      await strategy.set(req, requestedBlockNumber, res.result as Block);\n    } else {\n      // fill in result from cache\n      res.result = cacheResult;\n    }\n    return undefined;\n  });\n}\n"]}