{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"","sourcesContent":["import { JsonRpcRequest, JsonRpcResponse } from 'json-rpc-engine';\nimport SafeEventEmitter from '@metamask/safe-event-emitter';\n\nexport type Payload = Partial<JsonRpcRequest<any[]>>;\n\nexport interface JsonRpcRequestToCache extends JsonRpcRequest<string[]> {\n  skipCache: boolean;\n}\n\nexport type BlockData = string | string[];\n\nexport type Block = Record<string, BlockData>;\n\nexport type BlockCache = Record<string, Block>;\n\nexport type Cache = Record<number, BlockCache>;\n\nexport type SendAsyncCallBack<T> = (\n  err: unknown,\n  providerRes: JsonRpcResponse<T>,\n) => void;\n\nexport type SendCallBack = (\n  err: any,\n  providerRes: JsonRpcResponse<any>,\n) => void;\n\nexport interface SafeEventEmitterProvider extends SafeEventEmitter {\n  sendAsync: <T, U>(req: JsonRpcRequest<T>, cb: SendAsyncCallBack<U>) => void;\n  send: (req: JsonRpcRequest<any>, callback: SendCallBack) => void;\n}\n"]}